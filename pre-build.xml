<ns0:RootFileSystem xmlns:ns0="https://www.linutronix.de/projects/Elbe" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" created="2009-05-20T08:50:56" revision="6" xsi:schemaLocation="https://www.linutronix.de/projects/Elbe dbsfed.xsd">
	<project>
		<!-- human readable description of the project -->
		<name>armhf-revpi</name>
		<version>1.0</version>
		<description>
			buster rootfs for revolutionpi devices
		</description>
		<!-- buildtype is used to configure qemu-user and debian arch -->
		<buildtype>armhf</buildtype>
		<noauth />
		<mirror>
			<!-- primary mirror is used by debootstrap -->
			<primary_host>raspbian.raspberrypi.org</primary_host>
			<primary_path>raspbian</primary_path>
			<primary_proto>http</primary_proto>
		</mirror>

		<!-- debian testing? stable? unstable?? -->
		<suite>buster</suite>
	</project>
	<target>
		<!-- content for /etc/hostname -->
		<hostname>revpi</hostname>
		<!-- content for /etc/domainname -->
		<domain>revpi-domain</domain>
		<!-- root password -->
		<passwd>root</passwd>
		<!-- run a getty here: -->
		<console>ttyS0,115200</console>
		<!-- speed up build with debootstrap variant minbase.
		Using minbase here and explicit install of systemd later
		on speed up the installation process, since it reduces
		the emulated part (run in QEMU) of the installation
		significant.
		-->
		<package>
			<!-- build a tarball of the target image -->
			<tar>
				<name>pre-build.tgz</name>
			</tar>
		</package>
		<!-- define an sdcard image -->
		<images>
			<msdoshd>
				<!-- name of the image file -->
				<name>pre-build.img</name>
				<size>5000MiB</size>
					<!-- partition layout -->
					<partition>
						<size>50MiB</size>
						<!-- label needs to match with the fstab entry below -->
						<label>boot</label>
						<bootable/>
					</partition>
					<partition>
						<size>remain</size>
						<label>rfs</label>
					</partition>
			</msdoshd>
		</images>
		<fstab>
			<bylabel>
				<!-- label needs to match with an image entry aboth -->
				<label>rfs</label>
				<mountpoint>/</mountpoint>
				<fs>
					<!-- fs type and options -->
					<type>ext2</type>
					<tune2fs>-i 0</tune2fs>
				</fs>
			</bylabel>
			<bylabel>
				<label>boot</label>
				<mountpoint>/boot</mountpoint>
				<fs>
					<type>vfat</type>
				</fs>
			</bylabel>
		</fstab>
		<finetuning>
			<!-- prepare some file for the second stage -->
			<buildenv_command>
				echo "dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait nosplash" > /boot/cmdline.txt
			</buildenv_command>
			<buildenv_command>
				touch /boot/config.txt;
				echo "# Force the monitor to HDMI mode so that sound will be sent over HDMI cable" >> /boot/config.txt;
				echo "# Set monitor mode to DMT" >> /boot/config.txt;
				echo "hdmi_group=2" >> /boot/config.txt;
				echo "" >> /boot/config.txt;

				echo "# Set monitor resolution to 1024x768 XGA 60Hz (HDMI_DMT_XGA_60)" >> /boot/config.txt;
				echo "hdmi_mode=16" >> /boot/config.txt;
				echo "" >> /boot/config.txt;

				echo "# Make display smaller to stop text spilling off the screen" >> /boot/config.txt;
				echo "overscan_left=20" >> /boot/config.txt;
				echo "overscan_right=12" >> /boot/config.txt;
				echo "overscan_top=10" >> /boot/config.txt;
				echo "overscan_bottom=10" >> /boot/config.txt;
			</buildenv_command>
		</finetuning>
	</target>
</ns0:RootFileSystem>
